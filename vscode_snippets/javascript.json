{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Require": {
    "prefix": "rr",
    "body": [
      "const $1 = require('$1');",
      "$0"
    ]
  },
  "Require with desctruturing": {
    "prefix": "rn",
    "body": [
      "const {$3}$2 = require($1);",
      "$0"
    ]
  },
  "Test": {
    "prefix": "it",
    "body": [
      "it('$1', () => {",
      "$2",
      "});$3",
    ]
  },
  "If Error": {
    "prefix": "irr",
    "body": [
      "if (err) {",
      "  console.log(err);",
      "} else {",
      "  $1",
      "}$0"
    ]
  },
  "Mongoose Model": {
    "prefix": "mmd",
    "body": [
      "const mongoose = require('mongoose');",
      "const $1Schema = new mongoose.Schema({",
      "  $0",
      "});",
      "module.exports = new mongoose.model('$2', $1Schema);"
    ]
  },
  "MVC Route": {
    "prefix": "rt",
    "body": [
      "const express = require('express');",
      "const router = express.Router();",
      "const { $2 } = require('../controllers/$1');",
      "router.get('/'$3);",
      "module.exports = router;",
      "$0"
    ]
  },
  "MVC Controller": {
    "prefix": "ct",
    "body": [
      "exports.$1 = (req, res) => {",
      "  res.$2",
      "};",
      "$0"
    ]
  },
  "Express middleware": {
    "prefix": "mdl",
    "body": [
      "exports.$1 = (req, res, next) => {",
      "    $0",
      "    next()",
      "};"
    ]
  },
  "For loop": {
    "prefix": "fr",
    "body": [
      "for (let ${2:i}=${1:0};${2:i}<${array}.length;${2:i}++) {",
      "    $0",
      "}"
    ]
  },
  "For loop minus": {
    "prefix": "frr",
    "body": [
      "for (let i=${array}.length - 1;i>=0;i--) {",
      "$0",
      "}"
    ]
  },
  "Function with name": {
    "prefix": "fn",
    "body": [
      "function $1($2) {",
      "  $0",
      "}"
    ]
  },
  "Function arrow": {
    "prefix": "fa",
    "body": [
      "($1) => {$0}"
    ]
  },
  "Export component": {
    "prefix": "com",
    "body": [
      "import React from 'react'",
      "const $1 = ($2) => {",
      "  return <p>$1 Component</p>;",
      "};",
      "export default $1;"
    ]
  },
  "Import module": {
    "prefix": "in",
    "body": [
      "import $1 from '$2';"
    ]
  },
  "Class": {
    "prefix": "cl",
    "body": [
      "class $1 {",
      "  constructor($2){",
      "    $0",
      "  }",
      "}"
    ]
  },
  "Array length": {
    "prefix": "al",
    "body": [
      "array.length$0",
    ]
  },
  "Console log": {
    "prefix": "cg",
    "body": [
      "console.log(`$1`)$0",
    ]
  },
  "Module exports": {
    "prefix": "me",
    "body": [
      "module.exports = ",
    ]
  },
  "Default exports": {
    "prefix": "de",
    "body": [
      "export default ",
    ]
  },
  "simple test": {
    "prefix": "ts",
    "body": [
      "test('$1', () => {",
      "  $0",
      "})"
    ]
  }
}